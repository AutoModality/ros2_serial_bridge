// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file battery_status_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "battery_status_.hpp"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






battery_status_::battery_status_()
{
    m_timestamp = 0;

    m_voltage_v = 0.0;

    m_voltage_filtered_v = 0.0;

    m_current_a = 0.0;

    m_current_filtered_a = 0.0;

    m_average_current_a = 0.0;

    m_discharged_mah = 0.0;

    m_remaining = 0.0;

    m_scale = 0.0;

    m_temperature = 0.0;

    m_cell_count = 0;

    memset(&m_voltage_cell_v, 0, (4) * 4);
    m_max_cell_voltage_delta = 0.0;

    m_capacity = 0;

    m_cycle_count = 0;

    m_run_time_to_empty = 0;

    m_average_time_to_empty = 0;

    m_serial_number = 0;

    m_connected = false;

    m_system_source = false;

    m_priority = 0;

    m_is_powering_off = false;

    m_warning = 0;


}

battery_status_::~battery_status_()
{
}

battery_status_::battery_status_(const battery_status_ &x)
{
    m_timestamp = x.m_timestamp;
    m_voltage_v = x.m_voltage_v;
    m_voltage_filtered_v = x.m_voltage_filtered_v;
    m_current_a = x.m_current_a;
    m_current_filtered_a = x.m_current_filtered_a;
    m_average_current_a = x.m_average_current_a;
    m_discharged_mah = x.m_discharged_mah;
    m_remaining = x.m_remaining;
    m_scale = x.m_scale;
    m_temperature = x.m_temperature;
    m_cell_count = x.m_cell_count;
    m_voltage_cell_v = x.m_voltage_cell_v;
    m_max_cell_voltage_delta = x.m_max_cell_voltage_delta;
    m_capacity = x.m_capacity;
    m_cycle_count = x.m_cycle_count;
    m_run_time_to_empty = x.m_run_time_to_empty;
    m_average_time_to_empty = x.m_average_time_to_empty;
    m_serial_number = x.m_serial_number;
    m_connected = x.m_connected;
    m_system_source = x.m_system_source;
    m_priority = x.m_priority;
    m_is_powering_off = x.m_is_powering_off;
    m_warning = x.m_warning;
}

battery_status_::battery_status_(battery_status_ &&x)
{
    m_timestamp = x.m_timestamp;
    m_voltage_v = x.m_voltage_v;
    m_voltage_filtered_v = x.m_voltage_filtered_v;
    m_current_a = x.m_current_a;
    m_current_filtered_a = x.m_current_filtered_a;
    m_average_current_a = x.m_average_current_a;
    m_discharged_mah = x.m_discharged_mah;
    m_remaining = x.m_remaining;
    m_scale = x.m_scale;
    m_temperature = x.m_temperature;
    m_cell_count = x.m_cell_count;
    m_voltage_cell_v = std::move(x.m_voltage_cell_v);
    m_max_cell_voltage_delta = x.m_max_cell_voltage_delta;
    m_capacity = x.m_capacity;
    m_cycle_count = x.m_cycle_count;
    m_run_time_to_empty = x.m_run_time_to_empty;
    m_average_time_to_empty = x.m_average_time_to_empty;
    m_serial_number = x.m_serial_number;
    m_connected = x.m_connected;
    m_system_source = x.m_system_source;
    m_priority = x.m_priority;
    m_is_powering_off = x.m_is_powering_off;
    m_warning = x.m_warning;
}

battery_status_& battery_status_::operator=(const battery_status_ &x)
{
    m_timestamp = x.m_timestamp;
    m_voltage_v = x.m_voltage_v;
    m_voltage_filtered_v = x.m_voltage_filtered_v;
    m_current_a = x.m_current_a;
    m_current_filtered_a = x.m_current_filtered_a;
    m_average_current_a = x.m_average_current_a;
    m_discharged_mah = x.m_discharged_mah;
    m_remaining = x.m_remaining;
    m_scale = x.m_scale;
    m_temperature = x.m_temperature;
    m_cell_count = x.m_cell_count;
    m_voltage_cell_v = x.m_voltage_cell_v;
    m_max_cell_voltage_delta = x.m_max_cell_voltage_delta;
    m_capacity = x.m_capacity;
    m_cycle_count = x.m_cycle_count;
    m_run_time_to_empty = x.m_run_time_to_empty;
    m_average_time_to_empty = x.m_average_time_to_empty;
    m_serial_number = x.m_serial_number;
    m_connected = x.m_connected;
    m_system_source = x.m_system_source;
    m_priority = x.m_priority;
    m_is_powering_off = x.m_is_powering_off;
    m_warning = x.m_warning;

    return *this;
}

battery_status_& battery_status_::operator=(battery_status_ &&x)
{
    m_timestamp = x.m_timestamp;
    m_voltage_v = x.m_voltage_v;
    m_voltage_filtered_v = x.m_voltage_filtered_v;
    m_current_a = x.m_current_a;
    m_current_filtered_a = x.m_current_filtered_a;
    m_average_current_a = x.m_average_current_a;
    m_discharged_mah = x.m_discharged_mah;
    m_remaining = x.m_remaining;
    m_scale = x.m_scale;
    m_temperature = x.m_temperature;
    m_cell_count = x.m_cell_count;
    m_voltage_cell_v = std::move(x.m_voltage_cell_v);
    m_max_cell_voltage_delta = x.m_max_cell_voltage_delta;
    m_capacity = x.m_capacity;
    m_cycle_count = x.m_cycle_count;
    m_run_time_to_empty = x.m_run_time_to_empty;
    m_average_time_to_empty = x.m_average_time_to_empty;
    m_serial_number = x.m_serial_number;
    m_connected = x.m_connected;
    m_system_source = x.m_system_source;
    m_priority = x.m_priority;
    m_is_powering_off = x.m_is_powering_off;
    m_warning = x.m_warning;

    return *this;
}

size_t battery_status_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t battery_status_::getCdrSerializedSize(const battery_status_& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void battery_status_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_timestamp;
    scdr << m_voltage_v;
    scdr << m_voltage_filtered_v;
    scdr << m_current_a;
    scdr << m_current_filtered_a;
    scdr << m_average_current_a;
    scdr << m_discharged_mah;
    scdr << m_remaining;
    scdr << m_scale;
    scdr << m_temperature;
    scdr << m_cell_count;
    scdr << m_voltage_cell_v;
    scdr << m_max_cell_voltage_delta;
    scdr << m_capacity;
    scdr << m_cycle_count;
    scdr << m_run_time_to_empty;
    scdr << m_average_time_to_empty;
    scdr << m_serial_number;
    scdr << m_connected;
    scdr << m_system_source;
    scdr << m_priority;
    scdr << m_is_powering_off;
    scdr << m_warning;
}

void battery_status_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_timestamp;
    dcdr >> m_voltage_v;
    dcdr >> m_voltage_filtered_v;
    dcdr >> m_current_a;
    dcdr >> m_current_filtered_a;
    dcdr >> m_average_current_a;
    dcdr >> m_discharged_mah;
    dcdr >> m_remaining;
    dcdr >> m_scale;
    dcdr >> m_temperature;
    dcdr >> m_cell_count;
    dcdr >> m_voltage_cell_v;
    dcdr >> m_max_cell_voltage_delta;
    dcdr >> m_capacity;
    dcdr >> m_cycle_count;
    dcdr >> m_run_time_to_empty;
    dcdr >> m_average_time_to_empty;
    dcdr >> m_serial_number;
    dcdr >> m_connected;
    dcdr >> m_system_source;
    dcdr >> m_priority;
    dcdr >> m_is_powering_off;
    dcdr >> m_warning;
}

size_t battery_status_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
























    return current_align;
}

bool battery_status_::isKeyDefined()
{
    return false;
}

void battery_status_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}
