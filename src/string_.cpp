// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file string_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "string_.hpp"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


string_::string_()
{
    memset(&m_name, 0, (10) * 1);
}

string_::~string_()
{
}

string_::string_(const string_ &x)
{
    m_name = x.m_name;
}

string_::string_(string_ &&x)
{
    m_name = std::move(x.m_name);
}

string_& string_::operator=(const string_ &x)
{
    m_name = x.m_name;

    return *this;
}

string_& string_::operator=(string_ &&x)
{
    m_name = std::move(x.m_name);

    return *this;
}

size_t string_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ((10) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t string_::getCdrSerializedSize(const string_& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += ((10) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void string_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_name;
}

void string_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_name;
}

size_t string_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;
    return current_align;
}

bool string_::isKeyDefined()
{
    return false;
}

void string_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
}
